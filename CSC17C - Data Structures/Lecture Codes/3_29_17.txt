class FullStack {};
class EmptyStack {};

#include <iostream>
using namespace std;

template<class T, int MAX_ITEMS>
class Stack
{
private:
	T stackItems[MAX_ITEMS];
	int top;

public:
	Stack() { top = -1; }
	~Stack() {}
	void makeEmpty() { top = -1; }
	bool isEmpty() { return top == -1; }
	bool isFull() { return top == MAX_ITEMS - 1; }
	void push(T item) { top++; stackItems[top] = item; }
	void pop(T & item) { item = stackItems[top]; top--; }

};


#include "Stack.h"
const int MAX_ITEMS = 5;
int main()
{
	int item;
	Stack <int, MAX_ITEMS> inStack;

	inStack.makeEmpty();

	cout << "The contents of the cleared stack are: ";
	while (!inStack.isEmpty())
	{
		inStack.pop(item);
		cout << item << "-->";
	}
	cout << "NULL\n";

	cout << "Enter integers to be pushed onto the stack: \n";

	while (true)
	{
		cin >> item;
		inStack.push(item);
		if (inStack.isFull())
			break;
	}

	cout << "The stack values are : ";

	while (true)
	{
		inStack.pop(item);
		cout << item << "-->";
		if (inStack.isEmpty())
			break;
	}
	cout << "NULL\n";
	return 0;
}

//Find out wheteher you can have a template calss if you can have the function definition in a different CPP and the prototypes in the header file.